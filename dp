#!/bin/sh
#
# handle the legwork of mainting and updating static repos

[ "$DPPATHGIT" = "" ] && DPPATHGIT="/srv/git/"
[ "$DPPATHWWW" = "" ] && DPPATHWWW="/srv/www/git"

# add a new repository
addnew() {

	# require a repo location
	[ "$1" = "" ] && echo "::  You must specify a repo location " && exit 1

	# get the repo
	name=$(basename "$1")
	[ -d "$name" ] || git clone --bare "$1" || exit 1

	# if the git repo is a local file it will be cloned as $name.git
	[ -d "$name" ] || name="$name.git"

	# get owner
	owner="$(whoami)"
	printf "::  Owner [%s] : " "$owner"
	read -r REPLY
	[ "$REPLY" = "" ] || owner=$REPLY

	# get url
	host="$(hostname)"
	printf "::  Host git://[%s]/%s: " "$host" "$name"
	read -r REPLY
	[ "$REPLY" = "" ] || host="$REPLY"
	url="git://$host/$name"
	echo "::  $url"

	# get description
	desc=""
	printf "::  Description : "
	read -r REPLY
	[ "$REPLY" = "" ] || desc=$REPLY

	# add the metadata to the repo
	echo "$owner" > "$name"/owner
	echo "$url" > "$name"/url
	echo "$desc" > "$name"/description

	# get local repos location
	printf "::  Git files path [%s] : " "$DPPATHGIT"
	read -r REPLY
	[ "$REPLY" = "" ] || DPPATHGIT="$REPLY"

	# get location to put the web file location
	printf "::  Web files path [%s] : " "$DPPATHWWW"
	read -r REPLY
	[ "$REPLY" = "" ] || DPPATHWWW="$REPLY"

	# set LOCATION to destination
	sed -e 's,LOCATION,'"$DPPATHWWW"',' hooks/post-receive > "$name"/hooks/post-receive
	chmod +x "$name"/hooks/post-receive

	# move to the git file path
	mv "$name" "$DPPATHGIT"

}

# refresh repo or all repos if none specified
refresh() {

	# if the directory doesn't exist, exit
	[ -d "$DPPATHWWW" ] || ( echo "folder does not exist!" && exit 1 )

	# copy all style.css files over
	cp -r style.css "$DPPATHWWW"
	cd "$DPPATHWWW" || exit 1

	# create the landing page
	stagit-index "$DPPATHGIT"/* > index.html

	if [ "$1" = "" ]; then
		# for all the directories in $repos folder
		for i in "$DPPATHGIT"/*/; do
			j=$(basename "$i" .git)

			[ -d "$j" ] || mkdir "$j"
			cd "$j" || continue

			# generate repo pages
			stagit "$i"
			[ -h style.css ] || ln -s ../style.css .

			cd ..
		done
	else
		j=$(basename "$1" .git)

		# make the directory if it doesn't exist
		[ -d "$j" ] || mkdir "$j"
		cd "$j" || exit 1

		#	generate the html files
		stagit "$DPPATHGIT/$j.git"
		# ensure the style file is present
		[ -h style.css ] || ln -s ../style.css .
	fi

}

# update a repo from a local repo
update() {

	# get the repo
	name="$(basename "$1").git"

	# if the repo doesn't exist hand it to addnew
	[ -d "$DPPATHGIT/$name" ] || \
		{ echo "::  Repo not found, adding" && addnew "$1" && exit 0; }

	# get the repo
	[ -d "$name" ] || git clone --bare "$1" || exit 1

	# use rsync if avail or use really low iq method
	if command -v rsync >/dev/null; then
		# remove the description file as it never seems to be correct
		rm "$name/description"
		rsync -a "$name" "$DPPATHGIT"
		rm -rf "$name"
	else
		# get the files
		files="description owner url"
		for i in $files; do
			cp "$DPPATHGIT$name/$i" "$name"
		done
		rm -rf "${DPPATHGIT:?}/${name:?}"

		# move to the git file path
		mv "$name" "$DPPATHGIT"
	fi

	# refresh
	refresh "$name"

}

case "$1" in
	add) addnew "$2" ;;
	refresh) refresh "$2" ;;
	update) update "$2" ;;
	*) cat << EOF
dp: deploymanteau is an assistant script for deploying git repos to stagit.

allowed options:
  add        a
  remove     b
  update     c
  refresh    d

locations:
  \$DPPATHGIT = $DPPATHGIT
  \$DPPATHWWW = $DPPATHWWW

This message can be printed by running the command with no arguements.
EOF
esac
